// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Plant_BiologyEducation.Data;

#nullable disable

namespace Plant_BiologyEducation.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250701144630_SyncModelChanges")]
    partial class SyncModelChanges
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Plant_BiologyEducation.Entity.Model.Book", b =>
                {
                    b.Property<Guid>("Book_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Book_Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Cover_img")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Book_Id");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Plant_BiologyEducation.Entity.Model.Chapter", b =>
                {
                    b.Property<Guid>("Chapter_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("Book_Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Chapter_Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Chapter_Id");

                    b.HasIndex("Book_Id");

                    b.ToTable("Chapters");
                });

            modelBuilder.Entity("Plant_BiologyEducation.Entity.Model.Lesson", b =>
                {
                    b.Property<Guid>("Lesson_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("Chapter_Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Lesson_Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Lesson_Id");

                    b.HasIndex("Chapter_Id");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("Plant_BiologyEducation.Entity.Model.ManageBook", b =>
                {
                    b.Property<Guid>("User_Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Book_Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("User_Id", "Book_Id");

                    b.HasIndex("Book_Id");

                    b.ToTable("ManageBooks");
                });

            modelBuilder.Entity("Plant_BiologyEducation.Entity.Model.ManageChapter", b =>
                {
                    b.Property<Guid>("User_Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Chapter_Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("User_Id", "Chapter_Id");

                    b.HasIndex("Chapter_Id");

                    b.ToTable("ManageChapters");
                });

            modelBuilder.Entity("Plant_BiologyEducation.Entity.Model.ManageLesson", b =>
                {
                    b.Property<Guid>("User_Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Lesson_Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("User_Id", "Lesson_Id");

                    b.HasIndex("Lesson_Id");

                    b.ToTable("ManageLessons");
                });

            modelBuilder.Entity("Plant_BiologyEducation.Entity.Model.User", b =>
                {
                    b.Property<Guid>("User_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("User_Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Plant_Biology_Animals", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AverageLifeSpan")
                        .HasColumnType("integer");

                    b.Property<string>("CommonName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DiscoveredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Habitat")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExtinct")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("uuid");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("text");

                    b.Property<string>("ScientificName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SpecieType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.ToTable("Plant_Biology_Animals");
                });

            modelBuilder.Entity("Plant_BiologyEducation.Entity.Model.Chapter", b =>
                {
                    b.HasOne("Plant_BiologyEducation.Entity.Model.Book", "Book")
                        .WithMany("Chapters")
                        .HasForeignKey("Book_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Plant_BiologyEducation.Entity.Model.Lesson", b =>
                {
                    b.HasOne("Plant_BiologyEducation.Entity.Model.Chapter", "Chapter")
                        .WithMany("Lessons")
                        .HasForeignKey("Chapter_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("Plant_BiologyEducation.Entity.Model.ManageBook", b =>
                {
                    b.HasOne("Plant_BiologyEducation.Entity.Model.Book", "Book")
                        .WithMany("ManagedBy")
                        .HasForeignKey("Book_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plant_BiologyEducation.Entity.Model.User", "User")
                        .WithMany("ManagedBooks")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Plant_BiologyEducation.Entity.Model.ManageChapter", b =>
                {
                    b.HasOne("Plant_BiologyEducation.Entity.Model.Chapter", "Chapter")
                        .WithMany("ManagedBy")
                        .HasForeignKey("Chapter_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plant_BiologyEducation.Entity.Model.User", "User")
                        .WithMany("ManagedChapters")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Plant_BiologyEducation.Entity.Model.ManageLesson", b =>
                {
                    b.HasOne("Plant_BiologyEducation.Entity.Model.Lesson", "Lesson")
                        .WithMany("ManagedBy")
                        .HasForeignKey("Lesson_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plant_BiologyEducation.Entity.Model.User", "User")
                        .WithMany("ManagedLessons")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Plant_Biology_Animals", b =>
                {
                    b.HasOne("Plant_BiologyEducation.Entity.Model.Lesson", "Lesson")
                        .WithMany("RelatedSpecies")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("Plant_BiologyEducation.Entity.Model.Book", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("ManagedBy");
                });

            modelBuilder.Entity("Plant_BiologyEducation.Entity.Model.Chapter", b =>
                {
                    b.Navigation("Lessons");

                    b.Navigation("ManagedBy");
                });

            modelBuilder.Entity("Plant_BiologyEducation.Entity.Model.Lesson", b =>
                {
                    b.Navigation("ManagedBy");

                    b.Navigation("RelatedSpecies");
                });

            modelBuilder.Entity("Plant_BiologyEducation.Entity.Model.User", b =>
                {
                    b.Navigation("ManagedBooks");

                    b.Navigation("ManagedChapters");

                    b.Navigation("ManagedLessons");
                });
#pragma warning restore 612, 618
        }
    }
}
